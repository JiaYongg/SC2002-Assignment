import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Represents a receipt for a successful flat booking in the BTO Management
 * System.
 * Generated by HDB Officers after an applicant successfully books a flat.
 * Contains comprehensive details about the applicant and their booked flat.
 */
public class Receipt {
    private int receiptId;
    private LocalDateTime issueDateTime;

    private Application application;

    private HDBOfficer issuingOfficer;

    private LocalDate bookingDate;

    /**
     * Constructor that takes an Application object and the issuing officer
     * 
     * @param receiptId      Unique identifier for the receipt
     * @param application    The application containing applicant and project
     *                       details
     * @param issuingOfficer The HDB Officer generating the receipt
     * @param paymentMethod  The method of payment used
     */
    public Receipt(int receiptId, Application application, HDBOfficer issuingOfficer) {
        this.receiptId = receiptId;
        this.issueDateTime = LocalDateTime.now();
        this.application = application;
        this.issuingOfficer = issuingOfficer;
        this.bookingDate = LocalDate.now();
    }

    /**
     * Formats the receipt as a string for display or printing
     * 
     * @return Formatted receipt as a string
     */
    public String formatReceipt() {
        StringBuilder sb = new StringBuilder();
        DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss");

        Applicant applicant = application.getApplicant();
        Project project = application.getProject();
        FlatType flatType = application.getFlatType();

        sb.append("=====================================================\n");
        sb.append("                 HDB BOOKING RECEIPT                \n");
        sb.append("=====================================================\n\n");

        sb.append("Receipt ID: ").append(receiptId).append("\n");
        sb.append("Issue Date/Time: ").append(issueDateTime.format(dateTimeFormatter)).append("\n\n");

        sb.append("APPLICANT DETAILS\n");
        sb.append("-----------------------------------------------------\n");
        sb.append("Name: ").append(applicant.getName()).append("\n");
        sb.append("NRIC: ").append(maskNric(applicant.getNric())).append("\n");
        sb.append("Age: ").append(applicant.getAge()).append("\n");
        sb.append("Marital Status: ").append(applicant.getMaritalStatus()).append("\n\n");

        sb.append("PROJECT DETAILS\n");
        sb.append("-----------------------------------------------------\n");
        sb.append("Project Name: ").append(project.getProjectName()).append("\n");
        sb.append("Neighborhood: ").append(project.getNeighborhood()).append("\n");
        sb.append("Flat Type: ").append(flatType.getName()).append("\n");

        double flatPrice = getFlatPrice(project, flatType);
        sb.append("Flat Price: $").append(String.format("%,.2f", flatPrice)).append("\n\n");

        sb.append("BOOKING DETAILS\n");
        sb.append("-----------------------------------------------------\n");
        sb.append("Booking Date: ").append(bookingDate.format(dateFormatter)).append("\n");

        sb.append("OFFICER DETAILS\n");
        sb.append("-----------------------------------------------------\n");
        sb.append("Officer Name: ").append(issuingOfficer.getName()).append("\n");
        sb.append("\n");

        sb.append("=====================================================\n");
        sb.append("This receipt serves as proof of your flat booking.\n");
        sb.append("Please retain this receipt for future reference.\n");
        sb.append("=====================================================\n");

        return sb.toString();
    }

    /**
     * Helper method to get the price of a specific flat type in a project
     * 
     * @param project  The BTO project
     * @param flatType The flat type
     * @return The price of the flat type
     */
    private double getFlatPrice(Project project, FlatType flatType) {
        FlatType projectFlatType = project.getFlatTypeByName(flatType.getName());
        if (projectFlatType != null) {
            return projectFlatType.getPrice();
        }
        return 0.0;
    }

    /**
     * Masks the NRIC for privacy in printed receipts
     * 
     * @param nric The NRIC to mask
     * @return Masked NRIC (e.g., S****123A)
     */
    private String maskNric(String nric) {
        if (nric == null || nric.length() < 5) {
            return nric;
        }
        return nric.charAt(0) + "****" + nric.substring(nric.length() - 3);
    }

    /**
     * Checks if this receipt is for a specific applicant
     * 
     * @param applicant The applicant to check
     * @return true if the receipt is for the specified applicant, false otherwise
     */
    public boolean isFor(Applicant applicant) {
        return application.getApplicant().getNric().equals(applicant.getNric());
    }

    /**
     * Checks if this receipt is for a specific project
     * 
     * @param project The project to check
     * @return true if the receipt is for the specified project, false otherwise
     */
    public boolean matches(Project project) {
        return application.getProject().getProjectName().equals(project.getProjectName());
    }

    public int getReceiptId() {
        return receiptId;
    }

    public LocalDateTime getIssueDateTime() {
        return issueDateTime;
    }

    public Application getApplication() {
        return application;
    }

    public HDBOfficer getIssuingOfficer() {
        return issuingOfficer;
    }

    public LocalDate getBookingDate() {
        return bookingDate;
    }

}
